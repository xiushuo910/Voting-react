{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _forEach from \"lodash/forEach\";\nimport computeClassNames from './computeClassNames';\nimport computeClassNamesDifference from './computeClassNamesDifference';\nvar prevClassNames = new Map();\nvar handleClassNamesChange = function handleClassNamesChange(node, components) {\n  var currentClassNames = computeClassNames(components);\n  var _computeClassNamesDif = computeClassNamesDifference(prevClassNames.get(node), currentClassNames),\n    _computeClassNamesDif2 = _slicedToArray(_computeClassNamesDif, 2),\n    forAdd = _computeClassNamesDif2[0],\n    forRemoval = _computeClassNamesDif2[1];\n  _forEach(forAdd, function (className) {\n    return node.classList.add(className);\n  });\n  _forEach(forRemoval, function (className) {\n    return node.classList.remove(className);\n  });\n  prevClassNames.set(node, currentClassNames);\n};\nexport default handleClassNamesChange;","map":null,"metadata":{},"sourceType":"module"}