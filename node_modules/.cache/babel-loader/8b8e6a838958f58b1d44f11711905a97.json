{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _includes from \"lodash/includes\";\nimport _get from \"lodash/get\";\nimport _invoke from \"lodash/invoke\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { cloneElement, Component } from 'react';\nimport { normalizeTransitionDuration, SUI, useKeyOnly } from '../../lib';\nimport TransitionGroup from './TransitionGroup';\nvar TRANSITION_TYPE = {\n  ENTERING: 'show',\n  EXITING: 'hide'\n  /**\n   * A transition is an animation usually used to move content in or out of view.\n   */\n};\n\nvar Transition = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(Transition, _Component);\n  function Transition() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, Transition);\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Transition)).call.apply(_getPrototypeOf2, [this].concat(_args)));\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleStart\", function () {\n      var duration = _this.props.duration;\n      var status = _this.nextStatus;\n      _this.nextStatus = null;\n      _this.setSafeState({\n        status: status,\n        animating: true\n      }, function () {\n        var durationType = TRANSITION_TYPE[status];\n        var durationValue = normalizeTransitionDuration(duration, durationType);\n        _invoke(_this.props, 'onStart', null, _objectSpread({}, _this.props, {\n          status: status\n        }));\n        setTimeout(_this.handleComplete, durationValue);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleComplete\", function () {\n      var current = _this.state.status;\n      _invoke(_this.props, 'onComplete', null, _objectSpread({}, _this.props, {\n        status: current\n      }));\n      if (_this.nextStatus) {\n        _this.handleStart();\n        return;\n      }\n      var status = _this.computeCompletedStatus();\n      var callback = current === Transition.ENTERING ? 'onShow' : 'onHide';\n      _this.setSafeState({\n        status: status,\n        animating: false\n      }, function () {\n        _invoke(_this.props, callback, null, _objectSpread({}, _this.props, {\n          status: status\n        }));\n      });\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateStatus\", function () {\n      var animating = _this.state.animating;\n      if (_this.nextStatus) {\n        _this.nextStatus = _this.computeNextStatus();\n        if (!animating) _this.handleStart();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeClasses\", function () {\n      var _this$props = _this.props,\n        animation = _this$props.animation,\n        children = _this$props.children;\n      var _this$state = _this.state,\n        animating = _this$state.animating,\n        status = _this$state.status;\n      var childClasses = _get(children, 'props.className');\n      var directional = _includes(SUI.DIRECTIONAL_TRANSITIONS, animation);\n      if (directional) {\n        return cx(animation, childClasses, useKeyOnly(animating, 'animating'), useKeyOnly(status === Transition.ENTERING, 'in'), useKeyOnly(status === Transition.EXITING, 'out'), useKeyOnly(status === Transition.EXITED, 'hidden'), useKeyOnly(status !== Transition.EXITED, 'visible'), 'transition');\n      }\n      return cx(animation, childClasses, useKeyOnly(animating, 'animating transition'));\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeCompletedStatus\", function () {\n      var unmountOnHide = _this.props.unmountOnHide;\n      var status = _this.state.status;\n      if (status === Transition.ENTERING) return Transition.ENTERED;\n      return unmountOnHide ? Transition.UNMOUNTED : Transition.EXITED;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeInitialStatuses\", function () {\n      var _this$props2 = _this.props,\n        visible = _this$props2.visible,\n        mountOnShow = _this$props2.mountOnShow,\n        transitionOnMount = _this$props2.transitionOnMount,\n        unmountOnHide = _this$props2.unmountOnHide;\n      if (visible) {\n        if (transitionOnMount) {\n          return {\n            initial: Transition.EXITED,\n            next: Transition.ENTERING\n          };\n        }\n        return {\n          initial: Transition.ENTERED\n        };\n      }\n      if (mountOnShow || unmountOnHide) return {\n        initial: Transition.UNMOUNTED\n      };\n      return {\n        initial: Transition.EXITED\n      };\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeNextStatus\", function () {\n      var _this$state2 = _this.state,\n        animating = _this$state2.animating,\n        status = _this$state2.status;\n      if (animating) return status === Transition.ENTERING ? Transition.EXITING : Transition.ENTERING;\n      return status === Transition.ENTERED ? Transition.EXITING : Transition.ENTERING;\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeStatuses\", function (props) {\n      var status = _this.state.status;\n      var visible = props.visible;\n      if (visible) {\n        return {\n          current: status === Transition.UNMOUNTED && Transition.EXITED,\n          next: status !== Transition.ENTERING && status !== Transition.ENTERED && Transition.ENTERING\n        };\n      }\n      return {\n        next: (status === Transition.ENTERING || status === Transition.ENTERED) && Transition.EXITING\n      };\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeStyle\", function () {\n      var _this$props3 = _this.props,\n        children = _this$props3.children,\n        duration = _this$props3.duration;\n      var status = _this.state.status;\n      var childStyle = _get(children, 'props.style');\n      var type = TRANSITION_TYPE[status];\n      var animationDuration = type && \"\".concat(normalizeTransitionDuration(duration, type), \"ms\");\n      return _objectSpread({}, childStyle, {\n        animationDuration: animationDuration\n      });\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setSafeState\", function () {\n      var _this2;\n      return _this.mounted && (_this2 = _this).setState.apply(_this2, arguments);\n    });\n    var _this$computeInitialS = _this.computeInitialStatuses(),\n      _status = _this$computeInitialS.initial,\n      next = _this$computeInitialS.next;\n    _this.nextStatus = next;\n    _this.state = {\n      status: _status\n    };\n    return _this;\n  } // ----------------------------------------\n  // Lifecycle\n  // ----------------------------------------\n\n  _createClass(Transition, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mounted = true;\n      this.updateStatus();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var _this$computeStatuses = this.computeStatuses(nextProps),\n        status = _this$computeStatuses.current,\n        next = _this$computeStatuses.next;\n      this.nextStatus = next;\n      if (status) this.setSafeState({\n        status: status\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.updateStatus();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false;\n    } // ----------------------------------------\n    // Callback handling\n    // ----------------------------------------\n  }, {\n    key: \"render\",\n    // ----------------------------------------\n    // Render\n    // ----------------------------------------\n    value: function render() {\n      var children = this.props.children;\n      var status = this.state.status;\n      if (status === Transition.UNMOUNTED) return null;\n      return cloneElement(children, {\n        className: this.computeClasses(),\n        style: this.computeStyle()\n      });\n    }\n  }]);\n  return Transition;\n}(Component);\n_defineProperty(Transition, \"defaultProps\", {\n  animation: 'fade',\n  duration: 500,\n  visible: true,\n  mountOnShow: true,\n  transitionOnMount: false,\n  unmountOnHide: false\n});\n_defineProperty(Transition, \"ENTERED\", 'ENTERED');\n_defineProperty(Transition, \"ENTERING\", 'ENTERING');\n_defineProperty(Transition, \"EXITED\", 'EXITED');\n_defineProperty(Transition, \"EXITING\", 'EXITING');\n_defineProperty(Transition, \"UNMOUNTED\", 'UNMOUNTED');\n_defineProperty(Transition, \"Group\", TransitionGroup);\n_defineProperty(Transition, \"handledProps\", [\"animation\", \"children\", \"duration\", \"mountOnShow\", \"onComplete\", \"onHide\", \"onShow\", \"onStart\", \"reactKey\", \"transitionOnMount\", \"unmountOnHide\", \"visible\"]);\nexport { Transition as default };\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Named animation event to used. Must be defined in CSS. */\n  animation: PropTypes.oneOf(SUI.TRANSITIONS),\n  /** Primary content. */\n  children: PropTypes.element.isRequired,\n  /** Duration of the CSS transition animation in milliseconds. */\n  duration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    hide: PropTypes.number,\n    show: PropTypes.number\n  }), PropTypes.string]),\n  /** Show the component; triggers the enter or exit animation. */\n  visible: PropTypes.bool,\n  /** Wait until the first \"enter\" transition to mount the component (add it to the DOM). */\n  mountOnShow: PropTypes.bool,\n  /**\n   * Callback on each transition that changes visibility to shown.\n   *\n   * @param {null}\n   * @param {object} data - All props with status.\n   */\n  onComplete: PropTypes.func,\n  /**\n   * Callback on each transition that changes visibility to hidden.\n   *\n   * @param {null}\n   * @param {object} data - All props with status.\n   */\n  onHide: PropTypes.func,\n  /**\n   * Callback on each transition that changes visibility to shown.\n   *\n   * @param {null}\n   * @param {object} data - All props with status.\n   */\n  onShow: PropTypes.func,\n  /**\n   * Callback on animation start.\n   *\n   * @param {null}\n   * @param {object} data - All props with status.\n   */\n  onStart: PropTypes.func,\n  /** React's key of the element. */\n  reactKey: PropTypes.string,\n  /** Run the enter animation when the component mounts, if it is initially shown. */\n  transitionOnMount: PropTypes.bool,\n  /** Unmount the component (remove it from the DOM) when it is not shown. */\n  unmountOnHide: PropTypes.bool\n} : {};","map":null,"metadata":{},"sourceType":"module"}