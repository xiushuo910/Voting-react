{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _map from \"lodash/map\";\nimport _invoke from \"lodash/invoke\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { AutoControlledComponent as Component, createPaginationItems, customPropTypes, getUnhandledProps } from '../../lib';\nimport Menu from '../../collections/Menu';\nimport PaginationItem from './PaginationItem';\n/**\n * A component to render a pagination.\n */\n\nvar Pagination = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(Pagination, _Component);\n  function Pagination() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, Pagination);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Pagination)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleItemClick\", function (e, _ref) {\n      var nextActivePage = _ref.value;\n      var prevActivePage = _this.state.activePage; // Heads up! We need the cast to the \"number\" type there, as `activePage` can be a string\n\n      if (+prevActivePage === +nextActivePage) return;\n      _this.trySetState({\n        activePage: nextActivePage\n      });\n      _invoke(_this.props, 'onPageChange', e, _objectSpread({}, _this.props, {\n        activePage: nextActivePage\n      }));\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleItemOverrides\", function (active, type, value) {\n      return function (predefinedProps) {\n        return {\n          active: active,\n          type: type,\n          key: \"\".concat(type, \"-\").concat(value),\n          onClick: function onClick(e, itemProps) {\n            _invoke(predefinedProps, 'onClick', e, itemProps);\n            _this.handleItemClick(e, itemProps);\n          }\n        };\n      };\n    });\n    return _this;\n  }\n  _createClass(Pagination, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        ariaLabel = _this$props['aria-label'],\n        boundaryRange = _this$props.boundaryRange,\n        siblingRange = _this$props.siblingRange,\n        totalPages = _this$props.totalPages;\n      var activePage = this.state.activePage;\n      var items = createPaginationItems({\n        activePage: activePage,\n        boundaryRange: boundaryRange,\n        siblingRange: siblingRange,\n        totalPages: totalPages\n      });\n      var rest = getUnhandledProps(Pagination, this.props);\n      return React.createElement(Menu, _extends({}, rest, {\n        \"aria-label\": ariaLabel,\n        pagination: true,\n        role: \"navigation\"\n      }), _map(items, function (_ref2) {\n        var active = _ref2.active,\n          type = _ref2.type,\n          value = _ref2.value;\n        return PaginationItem.create(_this2.props[type], {\n          defaultProps: {\n            content: value,\n            value: value\n          },\n          overrideProps: _this2.handleItemOverrides(active, type, value)\n        });\n      }));\n    }\n  }]);\n  return Pagination;\n}(Component);\n_defineProperty(Pagination, \"autoControlledProps\", ['activePage']);\n_defineProperty(Pagination, \"defaultProps\", {\n  'aria-label': 'Pagination Navigation',\n  boundaryRange: 1,\n  ellipsisItem: '...',\n  firstItem: {\n    'aria-label': 'First item',\n    content: '«'\n  },\n  lastItem: {\n    'aria-label': 'Last item',\n    content: '»'\n  },\n  nextItem: {\n    'aria-label': 'Next item',\n    content: '⟩'\n  },\n  pageItem: {},\n  prevItem: {\n    'aria-label': 'Previous item',\n    content: '⟨'\n  },\n  siblingRange: 1\n});\n_defineProperty(Pagination, \"Item\", PaginationItem);\n_defineProperty(Pagination, \"handledProps\", [\"activePage\", \"aria-label\", \"boundaryRange\", \"defaultActivePage\", \"ellipsisItem\", \"firstItem\", \"lastItem\", \"nextItem\", \"onPageChange\", \"pageItem\", \"prevItem\", \"siblingRange\", \"totalPages\"]);\nexport { Pagination as default };\nPagination.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** A pagination item can have an aria label. */\n  'aria-label': PropTypes.string,\n  /** Initial activePage value. */\n  defaultActivePage: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Index of the currently active page. */\n  activePage: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Number of always visible pages at the beginning and end. */\n  boundaryRange: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** A shorthand for PaginationItem. */\n  ellipsisItem: customPropTypes.itemShorthand,\n  /** A shorthand for PaginationItem. */\n  firstItem: customPropTypes.itemShorthand,\n  /** A shorthand for PaginationItem. */\n  lastItem: customPropTypes.itemShorthand,\n  /** A shorthand for PaginationItem. */\n  nextItem: customPropTypes.itemShorthand,\n  /** A shorthand for PaginationItem. */\n  pageItem: customPropTypes.itemShorthand,\n  /** A shorthand for PaginationItem. */\n  prevItem: customPropTypes.itemShorthand,\n  /**\n   * Called on change of an active page.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onPageChange: PropTypes.func,\n  /** Number of always visible pages before and after the current one. */\n  siblingRange: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /** Total number of pages. */\n  totalPages: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\n} : {};","map":null,"metadata":{},"sourceType":"module"}