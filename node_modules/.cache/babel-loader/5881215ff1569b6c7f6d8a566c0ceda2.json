{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport { createShorthandFactory, customPropTypes } from '../../lib';\nimport AccordionTitle from './AccordionTitle';\nimport AccordionContent from './AccordionContent';\n/**\n * A panel sub-component for Accordion component.\n */\n\nvar AccordionPanel = /*#__PURE__*/\nfunction (_Component) {\n  _inherits(AccordionPanel, _Component);\n  function AccordionPanel() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, AccordionPanel);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccordionPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleTitleOverrides\", function (predefinedProps) {\n      return {\n        onClick: function onClick(e, titleProps) {\n          _invoke(predefinedProps, 'onClick', e, titleProps);\n          _invoke(_this.props, 'onTitleClick', e, titleProps);\n        }\n      };\n    });\n    return _this;\n  }\n  _createClass(AccordionPanel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        active = _this$props.active,\n        content = _this$props.content,\n        index = _this$props.index,\n        title = _this$props.title;\n      return [AccordionTitle.create(title, {\n        autoGenerateKey: false,\n        defaultProps: {\n          active: active,\n          index: index,\n          key: 'title'\n        },\n        overrideProps: this.handleTitleOverrides\n      }), AccordionContent.create(content, {\n        autoGenerateKey: false,\n        defaultProps: {\n          active: active,\n          key: 'content'\n        }\n      })];\n    }\n  }]);\n  return AccordionPanel;\n}(Component);\n_defineProperty(AccordionPanel, \"handledProps\", [\"active\", \"content\", \"index\", \"onTitleClick\", \"title\"]);\nAccordionPanel.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Whether or not the title is in the open state. */\n  active: PropTypes.bool,\n  /** A shorthand for Accordion.Content. */\n  content: customPropTypes.itemShorthand,\n  /** A panel index. */\n  index: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * Called when a panel title is clicked.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All item props.\n   */\n  onTitleClick: PropTypes.func,\n  /** A shorthand for Accordion.Title. */\n  title: customPropTypes.itemShorthand\n} : {};\nAccordionPanel.create = createShorthandFactory(AccordionPanel, null);\nexport default AccordionPanel;","map":null,"metadata":{},"sourceType":"module"}